@using Model.ViewModels.ModeratorViewModels;
@model IEnumerable<ModeratorViewModel>
@{
    ViewData["Title"] = "Create";
}
<html>
<body>
    <div class="container ">
        <h2>Moderator</h2>

        <p>
            <a class="btn btn-success" asp-action="Create"><em class="glyphicon glyphicon-plus"></em>Create New</a>
        </p>
        <div id="tables">
            <label>Comodity on page:</label><select v-model.lazy="CountOnPage" v-on:change="getData">
                <option>1</option>
                <option>5</option>
                <option>10</option>
                <option>20</option>
            </select>
            <label>Search</label>
            <input v-model="searchValue">
            <button value="Search" v-on:click="getData" class="btn btn-primary">Search</button>

            <table class="table  table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col" class="col-md-3">
                            @Html.DisplayNameFor(model => model.Email)
                        </th>
                        <th scope="col" class="col-md-3">
                            @Html.DisplayNameFor(model => model.UserName)
                        </th>
                        <th scope="col" class="col-md-3">
                            @Html.DisplayNameFor(model => model.NameCompany)
                        </th>
                        <th scope="col" class="col-md-3"></th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="item in Moderators">

                        <td>{{item.email}}</td>
                        <td>{{item.userName}}</td>
                        <td>{{item.nameCompany}}</td>

                        <td>
                        <a class="btn btn-warning" v-bind:href="'/Moderator/Edit?id='+item.id"><em class="glyphicon glyphicon-edit"></em></a>|
                        <a class="btn btn-danger" v-bind:href="'/Moderator/Delete?id='+item.id"><em class="glyphicon glyphicon-trash"></em></a>
                        </td>
                    </tr>
                 </tbody>
            </table>
            <div style="padding:inherit" class="btn-group">
                <button class="btn btn-default" v-on:click="previousPage"><span class='glyphicon glyphicon-triangle-left' /></button>
                <button class="btn btn-default" v-for="pageNumber in pages" v-on:click="getPageByNumber(pageNumber)">{{pageNumber}}</button>
                <button class="btn btn-default" v-on:click="nextPage"><span class='glyphicon glyphicon-triangle-right' /></button>
            </div>
        </div>
    </div>

    <script src="~/js/vue.js"></script>
    <script src="~/js/axios.js"></script>
    <script src="//unpkg.com/vue-plain-pagination@0.2.1"></script>

    <script>



        var Vue1 = new Vue({

            el: "#tables",
            data: {
                Moderators: [],
                page: 1,
                CountOnPage: 10,
                PageCount: 1,
                pages: [],
                searchValue: ""
            },
            methods: {
                getModerators() {
                    axios({
                        method: 'post',
                        url: '/Moderator/Get',
                        params: {
                            page: this.page,
                            countOnPage: this.CountOnPage,
                            searchValue: this.searchValue,
                        }
                    })
                        .then(response => {
                            this.Moderators = response.data;
                        })
                        .catch(error => {
                            console.log(error);
                        })
                        .finally();
                },
                getModeratorsCount() {
                    axios({
                        method: 'post',
                        url: '/Moderator/GetModeratorsCount',
                        params: {
                            searchValue: this.searchValue,

                        }
                    })
                        .then(response => {
                            if (response.data % this.CountOnPage == 0)
                                this.PageCount = response.data / this.CountOnPage;
                            else
                                this.PageCount = (response.data / this.CountOnPage) + 1;
                            this.pages = [];
                            for (let i = 1; i <= this.PageCount; i++) {
                                this.pages.push(i);
                            }
                        })
                        .catch(error => {
                            console.log(error);
                        })
                        .finally();
                },
                getData() {
                    this.getModerators();
                    this.getModeratorsCount();
                },
                nextPage() {
                    if (this.page < parseInt(this.PageCount)) {
                        this.page++;
                        this.getData();
                    }
                },
                previousPage() {
                    if (this.page > 1) {
                        this.page--;
                        this.getData();
                    }
                },
                getPageByNumber(pageNum) {
                    this.page = pageNum;
                    this.getData();
                }
            },
            mounted() {
                this.getData();
            }

        });


    </script>
</body>
</html>